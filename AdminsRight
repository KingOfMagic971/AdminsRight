# AdminsRight
–ú–æ–¥—É–ª—å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–¥–æ–±–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å 
# -*- coding: utf-8 -*-
# meta developer: @Gosgrrr
# scope: hikka_only

import sqlite3
import json
from typing import Dict, Optional

from .. import loader, utils
from telethon.tl.types import ChatAdminRights
from telethon.tl.functions.channels import EditAdminRequest

DB_FILE = "admin_rights.db"

# –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (.admins info on/off –∏ —Ç.–¥.)
DEFAULT_RIGHTS: Dict[str, int] = {
    "info": 0,       # change_info
    "post": 0,       # post_messages (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)
    "edit": 0,       # edit_messages (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)
    "delete": 1,     # delete_messages
    "ban": 1,        # ban_users
    "invite": 1,     # invite_users
    "pin": 1,        # pin_messages
    "add_admins": 0, # add_admins
    "anon": 0,       # anonymous (–∞–Ω–æ–Ω–∏–º–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø)
    "call": 1,       # manage_call (–≤–∏–¥–µ–æ—á–∞—Ç—ã)
    "poststory": 0,  # post_stories
    "editstory": 0,  # edit_stories
    "delstory": 0,   # delete_stories
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π –∞—Ç—Ä–∏–±—É—Ç–∞–º ChatAdminRights
KEY_MAP = {
    "info": "change_info",
    "post": "post_messages",
    "edit": "edit_messages",
    "delete": "delete_messages",
    "ban": "ban_users",
    "invite": "invite_users",
    "pin": "pin_messages",
    "add_admins": "add_admins",
    "anon": "anonymous",
    "call": "manage_call",
    "poststory": "post_stories",
    "editstory": "edit_stories",
    "delstory": "delete_stories",
}

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∞–≤
RIGHT_NAMES = {
    "info": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ",
    "post": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)",
    "edit": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)",
    "delete": "–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
    "ban": "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "invite": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "pin": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
    "add_admins": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
    "anon": "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–≤ –≥—Ä—É–ø–ø–∞—Ö)",
    "call": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞–º–∏",
    "poststory": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–π",
    "editstory": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π",
    "delstory": "–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–π",
}

ORDER = list(DEFAULT_RIGHTS.keys())  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞


@loader.tds
class AdminRights(loader.Module):
    """‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏, –ø—Ä–µ—Å–µ—Ç–∞–º–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º"""

    strings = {"name": "AdminRights"}

    # ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ ======
    def _init_db(self):
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute(
            """CREATE TABLE IF NOT EXISTS admin_rights_config (
                right_name TEXT PRIMARY KEY,
                is_enabled INTEGER
            )"""
        )
        cur.execute(
            """CREATE TABLE IF NOT EXISTS admin_presets (
                name TEXT PRIMARY KEY,
                rights TEXT
            )"""
        )
        cur.execute("SELECT COUNT(*) FROM admin_rights_config")
        if (cur.fetchone() or [0])[0] == 0:
            cur.executemany(
                "INSERT OR REPLACE INTO admin_rights_config (right_name, is_enabled) VALUES (?, ?)",
                list(DEFAULT_RIGHTS.items()),
            )
        conn.commit()
        conn.close()

    def _load_rights(self) -> Dict[str, bool]:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT right_name, is_enabled FROM admin_rights_config")
        rows = cur.fetchall()
        conn.close()
        data = {k: bool(v) for k, v in rows}
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
        for k, v in DEFAULT_RIGHTS.items():
            data.setdefault(k, bool(v))
        return data

    def _save_right(self, key: str, enabled: bool):
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute(
            "INSERT OR REPLACE INTO admin_rights_config (right_name, is_enabled) VALUES (?, ?)",
            (key, 1 if enabled else 0),
        )
        conn.commit()
        conn.close()
        self.rights[key] = enabled

    def _save_preset(self, name: str):
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute(
            "INSERT OR REPLACE INTO admin_presets (name, rights) VALUES (?, ?)",
            (name, json.dumps(self.rights)),
        )
        conn.commit()
        conn.close()

    def _get_preset_rights(self, name: str) -> Optional[Dict[str, bool]]:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT rights FROM admin_presets WHERE name = ?", (name,))
        row = cur.fetchone()
        conn.close()
        if not row:
            return None
        data = json.loads(row[0])
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        data = {k: bool(data.get(k, DEFAULT_RIGHTS[k])) for k in ORDER}
        return data

    def _delete_preset(self, name: str) -> bool:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("DELETE FROM admin_presets WHERE name = ?", (name,))
        conn.commit()
        ok = cur.rowcount > 0
        conn.close()
        return ok

    def _rename_preset(self, old: str, new: str) -> bool:
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("UPDATE admin_presets SET name = ? WHERE name = ?", (new, old))
        conn.commit()
        ok = cur.rowcount > 0
        conn.close()
        return ok

    def _list_presets(self):
        conn = sqlite3.connect(DB_FILE)
        cur = conn.cursor()
        cur.execute("SELECT name, rights FROM admin_presets ORDER BY name COLLATE NOCASE")
        rows = cur.fetchall()
        conn.close()
        return rows

    # ====== –§–û–†–ú–ê–¢–´ –í–´–í–û–î–ê ======
    def _format_rights(self, rights: Optional[Dict[str, bool]] = None) -> str:
        r = (rights or self.rights).copy()
        text = "üîÑ –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .admin:\n\n"
        for k in ORDER:
            enabled = r.get(k, False)
            icon = "‚úÖ" if enabled else "‚ùå"
            text += f"{icon} `{k}` ({RIGHT_NAMES[k]})\n"
        return text

    def _format_preset(self, name: str, rights: Dict[str, bool]) -> str:
        lines = [f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è **{name}**:\n"]
        enabled_count = sum(1 for v in rights.values() if v)
        lines.append(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: **{enabled_count}/{len(ORDER)}**\n")
        for k in ORDER:
            icon = "‚úÖ" if rights.get(k, False) else "‚ùå"
            lines.append(f"{icon} `{k}` ({RIGHT_NAMES[k]})")
        return "\n".join(lines)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ChatAdminRights –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    def _build_admin_rights(self, rights: Dict[str, bool]) -> ChatAdminRights:
        kwargs = {attr: False for attr in KEY_MAP.values()}
        for short_key, attr in KEY_MAP.items():
            kwargs[attr] = bool(rights.get(short_key, False))
        return ChatAdminRights(**kwargs)

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É/—Ä–µ–ø–ª–∞—é
    async def _resolve_user(self, message, arg: Optional[str]):
        if message.is_reply:
            rep = await message.get_reply_message()
            return await message.client.get_entity(rep.sender_id)
        if arg:
            return await message.client.get_entity(arg)
        return None

    # ====== LIFECYCLE ======
    async def client_ready(self, client, db):
        self.db = db
        self._init_db()
        self.rights = self._load_rights()

    # ====== –ö–û–ú–ê–ù–î–´ ======

    async def admincmd(self, message):
        """[preset] [username/id/reply] [rank] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∞ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"""
        args = utils.get_args(message)

        # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
        if not args:
            return await utils.answer(message, self._format_rights())

        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞:
        # –≤–∞—Ä–∏–∞–Ω—Ç—ã:
        # 1) .admin <preset> <user> <rank with spaces...>
        # 2) reply + .admin <preset> <rank with spaces...>
        if len(args) >= 3:
            preset = args[0]
            user_arg = args[1]
            rank = " ".join(args[2:])
            target = None
            try:
                target = await message.client.get_entity(user_arg)
            except Exception:
                return await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É.")

        elif len(args) >= 2 and message.is_reply:
            preset = args[0]
            rank = " ".join(args[1:])
            target = await self._resolve_user(message, None)
            if not target:
                return await utils.answer(message, "‚ùå –†–µ–ø–ª–∞–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            return await utils.answer(
                message,
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.admin <preset> <username/id/reply> <rank>`\n"
                "–õ–∏–±–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `.admin <preset> <rank>`",
            )

        rights = self._get_preset_rights(preset)
        if rights is None:
            return await utils.answer(message, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{preset}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        admin_rights = self._build_admin_rights(rights)

        try:
            await message.client(
                EditAdminRequest(
                    channel=message.chat_id,
                    user_id=target.id,
                    admin_rights=admin_rights,
                    rank=rank,
                )
            )
        except Exception as e:
            return await utils.answer(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞:\n`{e}`")

        name = utils.escape_html(utils.get_display_name(target))
        await utils.answer(message, f"üõ° {name} –Ω–∞–∑–Ω–∞—á–µ–Ω(–∞) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –∑–≤–∞–Ω–∏–µ–º ¬´{rank}¬ª.")

    async def unadmincmd(self, message):
        """[username/id/reply] ‚Äî —Å–Ω—è—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞ –∏ –∑–≤–∞–Ω–∏–µ"""
        args = utils.get_args(message)

        target = None
        if args:
            try:
                target = await message.client.get_entity(args[0])
            except Exception:
                return await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif message.is_reply:
            target = await self._resolve_user(message, None)
        else:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `.unadmin <username/id/reply>`")

        try:
            empty = ChatAdminRights()  # –≤—Å–µ —Ñ–ª–∞–≥–∏ False
            await message.client(
                EditAdminRequest(
                    channel=message.chat_id,
                    user_id=target.id,
                    admin_rights=empty,
                    rank="",
                )
            )
        except Exception as e:
            return await utils.answer(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞:\n`{e}`")

        name = utils.escape_html(utils.get_display_name(target))
        await utils.answer(message, f"‚úÖ **–í—Å–µ –ø—Ä–∞–≤–∞ –∏ –∑–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã.**")

    async def adminscmd(self, message):
        """<–ø—Ä–∞–≤–æ> <on/off> ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–æ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        args = utils.get_args(message)
        if len(args) != 2:
            return await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.admins <–ø—Ä–∞–≤–æ> <on/off>`")

        key, state = args[0], args[1].lower()
        if key not in ORDER:
            return await utils.answer(message, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ: `{key}`")

        enabled = state == "on"
        self._save_right(key, enabled)
        status = "–í–ö–õ–Æ–ß–ï–ù–û ‚úÖ" if enabled else "–í–´–ö–õ–Æ–ß–ï–ù–û ‚ùå"
        await utils.answer(message, f"{status} –ø—Ä–∞–≤–æ `{key}` –¥–ª—è –∫–æ–º–∞–Ω–¥—ã .admin.")

    async def adminsavecmd(self, message):
        """<–∏–º—è> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–µ—Å–µ—Ç"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.adminsave <–∏–º—è>`")
        name = args[0]
        self._save_preset(name)
        await utils.answer(message, f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    async def adminlistcmd(self, message):
        """‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        rows = self._list_presets()
        if not rows:
            return await utils.answer(message, "üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ—Ç.")
        out = ["üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤:\n"]
        for name, rights_json in rows:
            r = json.loads(rights_json)
            enabled = sum(1 for v in r.values() if v)
            out.append(f"‚Ä¢ {name}  ‚Äî  ‚úÖ {enabled}/{len(ORDER)}")
        await utils.answer(message, "\n".join(out))

    async def adminshowcmd(self, message):
        """<–∏–º—è> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.adminshow <–∏–º—è>`")
        name = args[0]
        rights = self._get_preset_rights(name)
        if rights is None:
            return await utils.answer(message, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await utils.answer(message, self._format_preset(name, rights))

    async def admindelcmd(self, message):
        """<–∏–º—è> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.admindel <–∏–º—è>`")
        name = args[0]
        if self._delete_preset(name):
            await utils.answer(message, f"üóë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await utils.answer(message, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def adminrenamecmd(self, message):
        """<—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ> ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–µ—Å–µ—Ç"""
        args = utils.get_args(message)
        if len(args) != 2:
            return await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.adminrename <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ>`")
        old, new = args
        if self._rename_preset(old, new):
            await utils.answer(message, f"‚úèÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{old}¬ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ ¬´{new}¬ª.")
        else:
            await utils.answer(message, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ¬´{old}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")